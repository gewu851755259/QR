//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : PlayerActivity.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.my51c.see51.ui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.lang.ref.WeakReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

//import org.apache.http.client.methods.HttpPost;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.media.AudioManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.text.format.Time;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.GestureDetector;
import android.view.GestureDetector.OnDoubleTapListener;
import android.view.GestureDetector.OnGestureListener;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.ViewFlipper;

import com.my51c.see51.adapter.CommentAdapter;
import com.my51c.see51.adapter.ScrollAdapter;
import com.my51c.see51.data.Device;
import com.my51c.see51.data.DeviceList;
import com.my51c.see51.data.DeviceLocalInfo;
import com.my51c.see51.listener.OnAVQSetListener;
import com.my51c.see51.listener.OnAlarmEnableListener;
import com.my51c.see51.listener.OnGetRFInfoListener;
import com.my51c.see51.listener.OnIntercomListener;
import com.my51c.see51.listener.OnPipeIOExceptionListener;
import com.my51c.see51.listener.OnSetCurtainInfoListener;
import com.my51c.see51.listener.OnSetRFInfoListener;
import com.my51c.see51.media.AACRecord;
import com.my51c.see51.media.H264toMP4;
import com.my51c.see51.media.LocalMediaStreamer;
import com.my51c.see51.media.MediaStreamFactory;
import com.my51c.see51.media.MediaStreamer;
import com.my51c.see51.media.MediaStreamer.MediaEvent;
import com.my51c.see51.media.MediaStreamer.MediaEventListener;
import com.my51c.see51.media.MediaStreamer.VideoFrame;
import com.my51c.see51.media.RemoteInteractionStreamer;
import com.my51c.see51.media.TutkMediaStreamer;
import com.my51c.see51.media.VideoDecoder;
import com.my51c.see51.media.VideoDecoderFactory;
import com.my51c.see51.protocal.RFPackage;
import com.my51c.see51.service.AppData;
import com.my51c.see51.service.LocalService;
import com.my51c.see51.widget.DeviceListView;
import com.my51c.see51.widget.DeviceListView.OnRefreshListener;
import com.my51c.see51.widget.LocUtil;
import com.my51c.see51.widget.MyComment;
import com.my51c.see51.widget.MyLoadingDialog;
import com.my51c.see51.widget.MyVideoSurface;
import com.my51c.see51.widget.NewSwitch;
import com.my51c.see51.widget.ScreenBean;
import com.my51c.see51.widget.ScrollLayout;
import com.my51c.see51.widget.ScrollLayout.OnScreenChangeListenerDataLoad;
import com.my51c.see51.widget.ToastCommom;
import com.my51c.see51.widget.VideoRender;
import com.sdview.view.R;
import com.spoledge.aacdecoder.MultiPlayer;
import com.xqe.method.DelEditText;

public class PlayerActivity extends FragmentActivity implements 
OnClickListener, MediaEventListener, OnRefreshListener,
	OnDoubleTapListener, OnGestureListener, OnTouchListener,OnItemClickListener{
	
	private final String TAG = "PlayerActivity";

	private  MediaStreamer mediaStreamer;
	private  MediaStreamer mediaStreamer_tutk;//add by marshal
	private  MediaStreamer mediaStreamer_51see;
	private  VideoDecoder videoDecoder;
	private  String deviceID;	
	private  String deviceversion;
	private  String devicename;
	private  VideoRender videoRender;
	
	private  MyVideoSurface glSurfaceView;
	private  ViewFlipper viewFlipper;
	private  View landScapeControlBar;
	
    
    ImageView btnSnapshoot;
    ImageView btnRecord;
    ImageView btnAlarm ;
    ImageView btnDefinition ;
    ImageView btnIntercom;
    ImageView btnFlipH ;
    ImageView btnFlipV ;
    ImageView btnAudio;
       

	private  GestureDetector gestureDetector;
	private  RelativeLayout  progressBarView;
	
	private  Thread drawSurfaceThread;
	private  Thread getIFrameThread;
	private  Thread getIFrameThread_tutk;
	
	private  MultiPlayer multiPlayer;
	private  PipedInputStream audioInputStream;
	
	private  VideoFrame[] frames;
	private  VideoFrame[] frames_tutk;
	private  VideoFrame[] frames_51see;
	private  int iFrameIndex;
	
	private RecState recState = RecState.STOP;
	private RecState preState = RecState.STOP;
	H264toMP4 recorder; 
	
	private File imageFile;
	private File videoFile;
	private boolean snap;
	
	private int nVideoWidth = 640;
	private int nVideoHeight = 480;
	int fps;
	DrawSurfaceRunnable drawSurfaceRunnable = new DrawSurfaceRunnable();
	private volatile Boolean forceExitThread = false;  //ǿ�ƽ����߳�ʱ���ô˱�־λ
	
	final static int LEFT_START_LINE = 5;
	
	private static long lastClickTime = 0;
	
	private static final int POLL_INTERVAL = 300;
	
	public enum RecState{  
	    START,PAUSE,STOP  
	} 
	
	private static final int MSG_TIME_OUT 				= 1;
	private static final int MSG_DISCONNECT 			= 2;
	private static final int MSG_GET_IFRAME 			= 3;
	private static final int MSG_SNAP_OK 				= 4;
	private static final int MSG_NONE_NETWORK 			= 5;
	private static final int MSG_INVALID_IP				= 7;
	private static final int MSG_INIT_FAIL 				= 8;
	private static final int MSG_STOP_RECORD 			= 9;
	private static final int MSG_START_INTERCOMM 		= 10;
	private static final int MSG_INTERCOMM_REQ_FAIL 	= 11;
	private static final int MSG_ALARM_STATE_CHANGED 	= 12;
	private static final int MSG_AVQ_CHANGED 	= 13;
	private static final int MSG_TUTK_FAIL		= 14;
	private static final int MSG_GET_IFRAME_TUTK 			= 15;
	private static final int MSG_GET_COMMENT_SUCCESS			= 16;
	private static final int MSG_GET_COMMENT_FAILED			= 17;
	private static final int MSG_POST_COMMENT_SUCCESS			= 18;
	private static final int MSG_POST_COMMENT_FAILED			= 19;
	private static final int MSG_POST_COMMENT_NULL			= 20;
	private static final int MSG_SET_VIEWPAGER			=21;
	
	private static final int MSG_SET_SUCESS = 22; 
	private static final int MSG_SET_FAILED = 23;
	private static final int MSG_SET_TIMEOUT = 24;
	private static final int MSG_SET_CURTAIN_FAILED = 25;
	private static final int MSG_SET_CURTAIN_SUCCESS = 26;
	private static final int MSG_SET_AUDIO_OPEN = 27;
	private static final int MSG_SET_AUDIO_RESTART = 28;
	private static final int MSG_REBACK_AUDIO_SPEACH = 29;
	private AlertDialog timeoutAlertDialog;
	private AlertDialog lostConnectionAlertDialog;
	private AlertDialog nonetworkAlertDialog;
	private AlertDialog invalidIPAlertDialog;
	private AlertDialog initFailedAlertDialog;
	
	private int flag = 0;
	private LinearLayout del_re;
	private View rcChat_popup;
	/**progressbar !*/
	private LinearLayout voice_rcd_hint_loading; 
	/**recoding*/
	private LinearLayout voice_rcd_hint_rcding;
	/**error !*/
	private LinearLayout voice_rcd_hint_tooshort;
	private boolean isShosrt = false;
	private ImageView img1;
	private ImageView sc_img1;
	private ImageView volume;
	private double lastFingerDis = -1.0;
	private int connect_status_51see=0;//0--no connect; 1--local; 2--51see connect; 3--tutk connected, 51see video pause
	private int connect_status_tutk=0;//0--no connect; 1---tutk connect
	private boolean isLocal;
	private AppData appData;
	private Button menuBtn;
	private TextView titleName;
	private LinearLayout backLayout;
	private RelativeLayout topLayout;
	private RelativeLayout tableLayout;
	private TextView controlBar,rfBar;
	
	private LocalService localService;
	InputMethodManager inputMethodManager;
	ProgressDialog pd;
	MyLoadingDialog waitdialog;
	public RFPackage rfpack;
	private RemoteInteractionStreamer devInfoMediaStream;
	private String url;
	private List<Map<String, Object>> mRFTotalList;
	private List<Fragment> fragments = new ArrayList<Fragment>();
	private ArrayList<ImageView> indexImgList = new ArrayList<ImageView>();
	private LinearLayout indexBar,barLayout;
	
	public int scrennFlag;
	private AudioManager audioManager;
	private int maxVolume,curVolume;
	private DeviceListView commentListView;
	private DelEditText commentEt;
	private Button publishBtn;
	public ArrayList<MyComment> commentList = new ArrayList<MyComment>();
	ToastCommom toast = new ToastCommom();
	private ScreenBean screenBean;
	private boolean connected = false;
	private boolean isRecording = false;
	private volatile boolean enableAudio = false;
	private boolean enableIntercom = false;
	private Thread audioThread;
	private AACRecord aacRecord;
	public final static String UI_ACTION = "UI_ACTION";
	private ScrollLayout mScrollLayout;
	public static int w,h;
	private static final float APP_PAGE_SIZE = 8.0f;
	private ScrollAdapter scrollAdapter;
	private RFPackage curRfpack;
	private Dialog waitDialog;
	private TimeOutAsyncTask asyncTask;
	private int switchNum;
	private static ArrayList<String> rfStrTypeList = new ArrayList<String>();
	private NewSwitch mSwitch1,mSwitch2,mSwitch3;
	private Dialog switchDialog;
	private int index;
	private boolean isWiredHeadSetOn = false;
	private ProgressBar audioLoading;
	private DeviceList localList;
	private Device device;
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);   
        getWindow().setSoftInputMode( WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        setContentView(R.layout.player_view);
        gestureDetector = new GestureDetector(getApplicationContext(),this);
    	videoDecoder = VideoDecoderFactory.createDecoder();
		videoDecoder.initGlobal();// ��ʼ��ffmpeg
		videoDecoder.initDecoder("H264");//��ʼ��������
        scrennFlag = Settings.System.getInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION, 0);
        Settings.System.putInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION, 1);
    	audioManager = (AudioManager) PlayerActivity.this.getSystemService(Context.AUDIO_SERVICE);
		maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
		curVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
		isLocal = getIntent().getBooleanExtra("isLocal",false);
		deviceID = getIntent().getStringExtra("id");
		url = getIntent().getStringExtra("url");
		appData = (AppData) this.getApplication();
		appData.addActivity(new WeakReference<Activity>(this));
		//******
		MyBroadcastRecevier recevier=new MyBroadcastRecevier();
		IntentFilter filter = new IntentFilter();  
        filter.addAction("android.intent.action.CLOSE_SYSTEM_DIALOGS");  
        registerReceiver(recevier, filter);  
        //*****
		devInfoMediaStream = appData.getRemoteInteractionStreamer();
		if(isLocal){
		 Calendar calendar = Calendar.getInstance();
		 localService =appData.getLocalService();
		 localList = appData.getLocalList();
		 device = new Device();
		 device = localList.getDevice(deviceID);
		 int year = device.getLocalInfo().getnYear();
		 if(year < 2016){
			 	DeviceLocalInfo localDeviceInfo = device.getLocalInfo();
			 	Log.e(TAG+"pre", localDeviceInfo.getnYear()+"");
				localDeviceInfo.setnYear(calendar.get(Calendar.YEAR));
				Log.e(TAG, calendar.get(Calendar.YEAR)+"");
				Log.e(TAG+"aft", localDeviceInfo.getnYear()+"");
				localDeviceInfo.setnMon((byte)(calendar.get(Calendar.MONTH)+1));
				localDeviceInfo.setnDay((byte)calendar.get(Calendar.DATE));
				localDeviceInfo.setnHour((byte) calendar.get(Calendar.HOUR_OF_DAY));
				localDeviceInfo.setnMin((byte) calendar.get(Calendar.MINUTE));
				localDeviceInfo.setnSec((byte) calendar.get(Calendar.SECOND));	
				Log.i(TAG, "����ʱ�䣺"+device.getID()+"-"+Calendar.HOUR_OF_DAY+":"+Calendar.MINUTE+":"+Calendar.SECOND);
				localService.setDeviceParam(localDeviceInfo);
				device.setLocalInfo(localDeviceInfo);
		 }
		}
		findView();
	} 
	private void findView(){
		
		mScrollLayout = (ScrollLayout)findViewById(R.id.ScrollLayoutTest);
		LayoutInflater inflater = LayoutInflater.from(getApplicationContext());
		tableLayout = (RelativeLayout)findViewById(R.id.tableLayout);
		titleName = (TextView)findViewById(R.id.titleName);
		topLayout = (RelativeLayout)findViewById(R.id.player_topLayout);
		indexBar = (LinearLayout)findViewById(R.id.indexBar);
		viewFlipper = (ViewFlipper) findViewById(R.id.viewFlipperPlay);
        progressBarView =(RelativeLayout) inflater.inflate(R.layout.progressbar, null);
        commentEt = (DelEditText)findViewById(R.id.commentEt);
        publishBtn = (Button)findViewById(R.id.publishBtn);
        commentListView = (DeviceListView)findViewById(R.id.commentListView);
        menuBtn = (Button)findViewById(R.id.menuBtn);
        backLayout = (LinearLayout)findViewById(R.id.back_layout);
        barLayout = (LinearLayout)findViewById(R.id.barL);
        del_re = (LinearLayout) findViewById(R.id.del_re);
        rcChat_popup = this.findViewById(R.id.rcChat_popup);
        voice_rcd_hint_rcding = (LinearLayout) this.findViewById(R.id.voice_rcd_hint_rcding);
		voice_rcd_hint_loading = (LinearLayout) this.findViewById(R.id.voice_rcd_hint_loading);
		voice_rcd_hint_tooshort = (LinearLayout) this.findViewById(R.id.voice_rcd_hint_tooshort);
		sc_img1 = (ImageView) this.findViewById(R.id.sc_img1);
		volume = (ImageView) this.findViewById(R.id.volume);
		controlBar = (TextView)findViewById(R.id.controlBar);
		rfBar = (TextView)findViewById(R.id.rfBar);
		audioLoading = (ProgressBar)findViewById(R.id.audio_loading);
		
		screenBean = LocUtil.getScreenPix(this);
        backLayout.setOnClickListener(this);
        menuBtn.setOnClickListener(this);
        publishBtn.setOnClickListener(this);
        commentListView.setonRefreshListener(this);
        controlBar.setOnClickListener(this);
        rfBar.setOnClickListener(this);
        // new Thread(httpGetThread).start();
        String title = getIntent().getExtras().getString("title");
		titleName.setText(title);
		setCamScrollLayout();
		
	}
	
	
    @Override
    public void onStart(){
    	super.onStart();
        Configuration cf = this.getResources().getConfiguration();
        onConfigurationChanged(cf);  	
    }

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		if(newConfig.orientation==Configuration.ORIENTATION_LANDSCAPE){
			getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
		}else {
			getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
		}
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);	
		viewFlipper.removeAllViews();
		if(newConfig.orientation==Configuration.ORIENTATION_LANDSCAPE){
			//�������ؿ�����
			topLayout.setVisibility(View.GONE);
			tableLayout.setVisibility(View.GONE);
		}else{
			//����
			topLayout.setVisibility(View.VISIBLE);
			tableLayout.setVisibility(View.VISIBLE);
		}
        DisplayMetrics dm = new DisplayMetrics();
        PlayerActivity.this.getWindowManager().getDefaultDisplay().getMetrics(dm);
        w = dm.widthPixels;
        h = dm.heightPixels;
        
    	if(!(newConfig.orientation==Configuration.ORIENTATION_LANDSCAPE && (nVideoWidth == 1280 && nVideoHeight == 720)))
    	{
    		h = h/2;
		}
    	if(newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE){
    		h = dm.heightPixels;
    		w = dm.widthPixels;
    	}
    	
        LayoutParams laParams=(LayoutParams)viewFlipper.getLayoutParams();
        laParams.width = w;
        laParams.height = h;
        viewFlipper.setLayoutParams(laParams);
		glSurfaceView = new MyVideoSurface(this);
		glSurfaceView.resetRatio(w,h);
		viewFlipper.addView(progressBarView, 0);
		viewFlipper.addView(glSurfaceView, 1);
		if (connected) {
			viewFlipper.setDisplayedChild(1);
		}
	}
	
	@Override
	public void onResume(){
		super.onResume();
		isWiredHeadSetOn = audioManager.isWiredHeadsetOn();
		getRfPack();
		Settings.System.putInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION, 1);
		if(glSurfaceView!=null)
		{
			glSurfaceView.onResume();
		}
		initAlertDialogs();
		if(isLocal)
		{
			new ConnectThread("local").start();
		}
		else
		{
			new ConnectThread("51see").start();//just for tcp, not connect to tutk
			//new ConnectThread("tutk").start();//no need tutk any more
		}
	}
	
	
	@Override
	public void onPause()
	{
		super.onPause();
		if(enableAudio){
			onSetAudio(false);
		}
		if(flag==1){
			btnIntercom.setBackgroundResource(R.drawable.mic_off);
			//Log.d(TAG, "stop intercom");
			enableIntercom = false;
			if(mediaStreamer_51see!=null){
					mediaStreamer_51see.setInterCom(enableIntercom);
					mediaStreamer_51see.setOnIntercomListener(null);
			}
			if (aacRecord!=null) {
				aacRecord.stop();
				aacRecord = null;
			}	

			mHandler.removeCallbacks(mPollTask);
			Settings.System.putInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION, 1);
		}
		
		Settings.System.putInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION, scrennFlag);
		if(glSurfaceView!=null)
		{
			glSurfaceView.onPause();
		}
		isRecording = false;   
		dismissAlertDialogs();
	}
	
	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		if(!forceExitThread)
		{
			stopThread();
		}
	   	if(mediaStreamer_tutk!=null)
    	{
    		mediaStreamer_tutk.close();
    		//mediaStreamer_tutk =null;
    	}
     	if(mediaStreamer_51see!=null)
    	{
     		mediaStreamer_51see.close();
     		mediaStreamer_51see =null;
    	}
     	mediaStreamer = null;
    	frames=null;
    	frames_51see=null;     	
     	System.gc();
     	audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, 0);
		super.onStop();
	}
	
	private void getRfPack(){
		
		barLayout.setVisibility(View.GONE);
		indexImgList.clear();
		indexBar.removeAllViews();
		mScrollLayout.removeViews(1, mScrollLayout.getChildCount()-1);
		
		devInfoMediaStream = appData.getRemoteInteractionStreamer();
		if(devInfoMediaStream == null)
		{	
			createRemoteOperaction();
		}else{
			devInfoMediaStream.getRFDeviceInfo();
		}
		devInfoMediaStream.setOnGetRFInfoListener(mOnGetRFInfoListener);
	}
	
	private void createRemoteOperaction()
	{	
		Map<String, String> paramp = new HashMap<String, String>();
		paramp.put("UserName", "admin"); 
		paramp.put("Password", "admin"); 
		paramp.put("Id", deviceID);	
		
		
		if(isLocal)
		{  
			devInfoMediaStream = new RemoteInteractionStreamer(url, paramp);	
		}
		else
		{
			devInfoMediaStream = MediaStreamFactory.createRemoteInteractionMediaStreamer(url, paramp);
		}
			
		if(devInfoMediaStream != null)
		{   
			appData.setRemoteInteractionStreamer(devInfoMediaStream);
			devInfoMediaStream.open();
			devInfoMediaStream.setDevId(deviceID);
		}
		else
		{
			appData.setRemoteInteractionStreamer(null);
		}
	}
	
	private OnGetRFInfoListener mOnGetRFInfoListener = new OnGetRFInfoListener(){

		@Override
		public void onGetRFInfoFailed() {
			
		}
		
		@Override
		public void onGetRFInfoSuccess(byte[] devbuf) {
			// TODO Auto-generated method stub
		
			devInfoMediaStream.setOnGetRFInfoListener(null);
			String parsestr;
			parsestr = byteToString(devbuf);
			rfpack = new RFPackage(parsestr);
			if(rfpack!=null)
			{
				mRFTotalList = rfpack.getRFDevList();//��ȡ������rf�豸��Ϣ��list
			}
			if(mRFTotalList == null){
				return;
			}
			Log.i(TAG, "rf�豸����(��Ѫѹ��):"+mRFTotalList.size());
			mHandler.sendEmptyMessage(MSG_SET_VIEWPAGER);
		}
	};
	
	protected String byteToString(byte[] src)
	{
		int len = 0;
		for (; len < src.length; len++)
		{
			if (src[len] == 0)
			{
				break;
			}
		}
		return new String(src, 0, len);
	}
	public void addIndexImg(){
    	ImageView indexImg = new ImageView(getApplicationContext());
 		LayoutParams lp = new LayoutParams((int)getResources().getDimension(R.dimen.index_bar_width), (int)getResources().getDimension(R.dimen.index_bar_width));
 		lp.setMargins(2, 2, 2, 2);
 		indexImg.setLayoutParams(lp);
 		indexImg.setImageResource(R.drawable.unselect_img);
 		indexImgList.add(indexImg);
 		indexBar.addView(indexImg);
    }
	
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {//����������
		
		audioManager = (AudioManager) PlayerActivity.this.getSystemService(Context.AUDIO_SERVICE);
		int maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
		int curVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
		audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume, 0);
		switch (keyCode) {
		case KeyEvent.KEYCODE_VOLUME_DOWN:
			
			curVolume = curVolume-3;
			if(curVolume < 3){
				curVolume = 0;
			}
			audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, 0);
			break;
		case KeyEvent.KEYCODE_VOLUME_UP:
			curVolume = curVolume+3;
			if(curVolume >= maxVolume){
				curVolume = maxVolume;
			}
			audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, 0);
			break;

		default:
			break;
		}
		
		
		return super.onKeyDown(keyCode, event);
	}

	private void stopThread() {
		forceExitThread = true;
		if (aacRecord!=null) {		
			aacRecord.stop();
			aacRecord = null;
		}
		if (recState!=RecState.STOP) {
			recState=RecState.STOP;
		}
		try {
			if(getIFrameThread != null){				
				getIFrameThread.interrupt();
				////Log.d("PlayerActivity", "getIFrameThread.join()");
				//getIFrameThread.join();
			}
			if(drawSurfaceThread != null){
				drawSurfaceThread.interrupt();
				////Log.d("PlayerActivity", "drawSurfaceThread.join()");
				drawSurfaceThread.join();				
			}
			getIFrameThread = null;
			drawSurfaceThread = null;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		connected = false;
	}
	
    //֪ͨgalleryˢ��
    public void fileScan(File file){   
        try {
        	mHandler.sendEmptyMessage(MSG_STOP_RECORD);
			Uri data = Uri.parse("file://"+file.getAbsolutePath());   
			sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, data));
		} catch (Exception e) {
			e.printStackTrace();
		}   
    }
	
	@Override
	public void OnMediaDataException(MediaEvent event) {
		// ֹͣ�����߳�
		Message msg = new Message();
		switch (event) {
		case CONN_TIME_OUT:
			
			if(mediaStreamer instanceof TutkMediaStreamer)
			{
				msg.what = MSG_TUTK_FAIL;
			}
			else {
				msg.what = MSG_TIME_OUT;
			}
		break;
		
		case CONN_DISCONNECT: 
			msg.what = MSG_DISCONNECT;
		break;
		}
		this.mHandler.sendMessage(msg);
	}

	private Runnable palyAudio = new Runnable() {
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			multiPlayer = new MultiPlayer(null, 300, 150);
			try {
				mediaStreamer.createAudioStream();
				audioInputStream = new PipedInputStream(mediaStreamer.getAudioStream());
				multiPlayer.play(audioInputStream);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				
			}			
		}
	};
	
	private void startAudio() {		
		audioThread = new Thread(palyAudio);
		audioThread.start();		
	}
	
	private void stopAudio() {
		if(audioThread != null){				
			audioThread.interrupt();
		}
		
		mediaStreamer.closeAudioStream();
		try {
			if(audioInputStream!=null)
				audioInputStream.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (multiPlayer!=null) {
			multiPlayer.stop();
			multiPlayer = null;
		}
	}
	
	private File openSnapFile(String szPath, String szFileName){
		
		File retFile = null;
		String sDStateString = Environment.getExternalStorageState();
		if (sDStateString.equals(Environment.MEDIA_MOUNTED)) {
			try {
				File SDFile = Environment.getExternalStorageDirectory();
				szPath = SDFile.getAbsolutePath()
						+ File.separator + getString(R.string.app_name)+ File.separator + szPath;
				File myFile = new File(szPath);
				if (!myFile.exists()) {
					myFile.mkdirs();
				}
				retFile = new File(myFile, szFileName);
				retFile.createNewFile();
				snap = true;
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
		return retFile;
	}
	
	
	private OnIntercomListener mOnIntercomListener = new OnIntercomListener(){

		@Override
		public void onIntercom() {
			// TODO Auto-generated method stub
			if (aacRecord==null) {
				//aacRecord = new AACRecord(mediaStreamer);
				if(mediaStreamer_51see!=null){
					aacRecord = new AACRecord(mediaStreamer_51see,PlayerActivity.this.getApplicationContext());
					Log.i("TestAAC", "PlayerActivity��AACRecord��ʼ��");
				}
				
			}
			aacRecord.start();
			mHandler.sendEmptyMessage(MSG_START_INTERCOMM);
		}

		@Override
		public void onUnsupported(String error) {
			// TODO Auto-generated method stub
			Message msg = new Message();
			msg.what = MSG_INTERCOMM_REQ_FAIL;
			msg.obj = error;
			mHandler.sendMessage(msg);
		}
	};
	
	private OnPipeIOExceptionListener mOnPipeIOExceptionListener = new OnPipeIOExceptionListener() {
		
		@Override
		public void OnIOException() {
			// TODO Auto-generated method stub
			mHandler.sendEmptyMessage(MSG_SET_AUDIO_RESTART);
		}
	};
	
	private OnAlarmEnableListener mOnAlarmEnableListener = new OnAlarmEnableListener(){
		@Override
		public void onAction() {
			// TODO Auto-generated method stub
			mHandler.sendEmptyMessage(MSG_ALARM_STATE_CHANGED);
		}
	};
	private OnAVQSetListener mOnAVQSetListener = new OnAVQSetListener(){
		@Override
		public void onAction() {
			// TODO Auto-generated method stub
			mHandler.sendEmptyMessage(MSG_AVQ_CHANGED);
		}
	};
	
	private Runnable mPollTask = new Runnable() {
		public void run() {
			double amp = 0;
			if(aacRecord != null)
			{
				amp = aacRecord.getAmplitude();
				updateDisplay(amp);
				//Log.d(TAG, "volume value" + amp);
			}
			mHandler.postDelayed(mPollTask, POLL_INTERVAL);
		}
	};
	
	private void updateDisplay(double signalEMA) {

		if(volume == null)
			return;
		
		int nVolume = (int) signalEMA;
			
		if(nVolume < 200.0)
		{
		   volume.setImageResource(R.drawable.voice1);
		}
		else if(nVolume >= 200.0 && nVolume < 600)
		{
		   volume.setImageResource(R.drawable.voice2);
		}
		else if(nVolume >= 600.0 && nVolume < 1200)
		{
		   volume.setImageResource(R.drawable.voice3);
		}
		else if(nVolume >= 1200.0 && nVolume < 2400)
		{
		   volume.setImageResource(R.drawable.voice4);
		}
		else if(nVolume >= 2400.0 && nVolume < 10000)
		{
		   volume.setImageResource(R.drawable.voice5);
		}
		else if(nVolume >= 10000.0 && nVolume < 28000.0)
		{
		   volume.setImageResource(R.drawable.voice6);
		}
		else if(nVolume >= 28000.0)
		{
		   volume.setImageResource(R.drawable.voice7);
		}
	}
	
	private void onSetInterComAction(boolean  bOn)
	{	
		if(bOn)
		{
			flag = 1;
			btnIntercom.setBackgroundResource(R.drawable.mic_on);
			if(mediaStreamer_51see!=null){
				Log.i("TestAAC", "PlayerActivity:���ü���mOnIntercomListener");
				mediaStreamer_51see.setOnIntercomListener(mOnIntercomListener);
			}
			enableIntercom = true;
			if(mediaStreamer_51see!=null)
				mediaStreamer_51see.setInterCom(enableIntercom);
			
			if(enableAudio)
			{
			   enableAudio = !enableAudio;
			   onSetAudio(enableAudio);
			}
			voice_rcd_hint_rcding.setVisibility(View.VISIBLE);
			mHandler.postDelayed(mPollTask, POLL_INTERVAL);
			Settings.System.putInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION, 0);
		}
		else
		{
			flag = 2;
			btnIntercom.setBackgroundResource(R.drawable.mic_off);
			//Log.d(TAG, "stop intercom");
			enableIntercom = false;
			
			//this.mediaStreamer.setOnIntercomListener(null);
			if(mediaStreamer_51see!=null){
					mediaStreamer_51see.setInterCom(enableIntercom);
					mediaStreamer_51see.setOnIntercomListener(null);
			}
			if (aacRecord!=null) {
				aacRecord.stop();
				aacRecord = null;
			}	

			if(isLocal){
				mHandler.sendEmptyMessageDelayed(MSG_SET_AUDIO_OPEN, 250);
			}else{
				mHandler.sendEmptyMessageDelayed(MSG_SET_AUDIO_OPEN, 500);
			}
			
			voice_rcd_hint_rcding.setVisibility(View.GONE);
			if(enableAudio){
				audioLoading.setVisibility(View.VISIBLE);
			}
			mHandler.removeCallbacks(mPollTask);
			Settings.System.putInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION, 1);
		}
	}
	
	public void onSetAudio(boolean bAudio)
	{
		//Log.d("audio", "enableAudio = "+bAudio);
		this.mediaStreamer.setAudio(bAudio);
		if (bAudio) {
			if(flag!=1){
				audioLoading.setVisibility(View.VISIBLE);
			}
			startAudio();
			//Log.d("audio", "startAudio ");
			if(!isWiredHeadSetOn){
				audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume, 0);
			}else{
				audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume*3/4, 0);
			}
			
			btnAudio.setBackgroundResource(R.drawable.player_intercom_on);
//			onSetInterComAction(false);
		}else {
			stopAudio();
			audioLoading.setVisibility(View.GONE);
			//Log.d("audio", "stopAudio ");
			audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, 0);
			btnAudio.setBackgroundResource(R.drawable.player_intercom_off);
		}
	}
	
	//播放视频界面按钮
	@Override
	public void onClick(View v) {

		switch (v.getId()) {
			
		case R.id.imageButtonFlipH://镜像
			//Log.d("imageButtonFlipH", "imageButtonFlipH");
			this.mediaStreamer.flipH();
			break;
		case R.id.imageButtonFlipV://翻转
			this.mediaStreamer.flipV();
			break;
		case R.id.imageButtonAlarm://警报
			if (this.mediaStreamer.m_bAlarmEnable==0) 
			{
				this.mediaStreamer.m_bAlarmEnable = 1;
			}
			else 
			{
				this.mediaStreamer.m_bAlarmEnable = 0;
			}
			
			this.mediaStreamer.setAlarmEnable();
			
			RefreshAlarmEnableState();
			break;
			
		case R.id.imageButtonDefinition://画质
			if (this.mediaStreamer.m_nDefinitionCurrent==3) 
			{
				
				this.mediaStreamer.m_nDefinitionCurrent = 1;//��
			}
			else if(this.mediaStreamer.m_nDefinitionCurrent==5) 
			{
				this.mediaStreamer.m_nDefinitionCurrent = 3;
			}
			else if(this.mediaStreamer.m_nDefinitionCurrent==1) 
			{
				this.mediaStreamer.m_nDefinitionCurrent = 5;//��
			}
			
			this.mediaStreamer.setDefinition();
			RefreshAVQState();//UI
			break;
			
			
		case R.id.imageButtonSnap: {//拍照
			if (!drawSurfaceThread.isAlive())
				break;
			String sDStateString = Environment.getExternalStorageState();
			if (sDStateString.equals(Environment.MEDIA_MOUNTED)) {
				try {
					// ��ȡ��չ�洢�豸���ļ�Ŀ¼
					File SDFile = Environment.getExternalStorageDirectory();
					String imagePath = SDFile.getAbsolutePath()
							+ File.separator + getString(R.string.app_name)+ File.separator +"image";
					Time mTime = new Time(); // or Time t=new Time("GMT+8");
												// ����Time Zone���ϡ�
					mTime.setToNow(); // ȡ��ϵͳʱ�䡣
					String filename = mTime.format2445() + ".jpg";
					File myFile = new File(imagePath);

					// �ж��Ƿ����,�������򴴽�
					if (!myFile.exists()) {
						myFile.mkdirs();
					}

					imageFile = new File(myFile, filename);
					imageFile.createNewFile();
					snap = true;
				} catch (FileNotFoundException e) {
					//Log.d("Player", "FileNotFoundException!");
					e.printStackTrace();
				} catch (Exception e) {
					// TODO: handle exception
					//Log.d("Player", "snapshoot exception!");
					e.printStackTrace();
				}// end of try
			}
			break;
		}

		case R.id.imageButtonRecord://录像

			if (recState != RecState.STOP) {
				recState = RecState.STOP;
				isRecording = false;
				break;
			}			
			String sdState = Environment.getExternalStorageState();
			if (sdState.equals(Environment.MEDIA_MOUNTED)) {
				File SDFile = Environment.getExternalStorageDirectory();
				String videoPath = SDFile.getAbsolutePath() + File.separator+getString(R.string.app_name)+ File.separator
						+ "video";
				Time mTime = new Time(); // or Time t=new Time("GMT+8"); ����Time
											// Zone���ϡ�
				mTime.setToNow(); // 取得系统的时间
				int month = mTime.month+1;
				String monthStr = month>10?month+"" : "0"+month;
				String filename = mTime.year+monthStr+mTime.monthDay+mTime.hour+mTime.minute+mTime.second + ".mp4";
				File myFile = new File(videoPath);
				if (!myFile.exists()) {
					myFile.mkdirs();
				}
				videoFile = new File(myFile, filename);
				try {
					videoFile.createNewFile();
					
					if(recorder != null)
					{
						recorder = null;
					}
					recorder = new H264toMP4(videoFile.getAbsolutePath(),
								videoDecoder);
					recorder.setFps(fps);
					// recording = RecordingState.START;
					
					if (recorder.startRecording() == 0) {
						recState = RecState.START;
						isRecording = true;
						btnRecord.setBackgroundResource(R.drawable.video_record_high_light);
						//Log.d("Player", "start record... ");
					} else {
						//Log.d("Player", "start record failed! ");
						recorder = null;// ��ʼ��mp4����ʧ��
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			break;
		case R.id.imageButtonAudio://音频
			enableAudio = !enableAudio;
			onSetAudio(enableAudio);
			break;
		case R.id.imageButtonInterCom://对讲
			if(!isSpeachClick){
				String s = deviceID.substring(0, 2);
				if(s.equals("c8")){
					AACRecord.RECORDER_SAMPLERATE = 16000;
				}else{
					AACRecord.RECORDER_SAMPLERATE = 8000;
				}
				if(flag==1){
					onSetInterComAction(false);
				}else{
					onSetInterComAction(true);
				}
				isSpeachClick = true;
				new Timer().schedule(new TimerTask() {
					
					@Override
					public void run() {
						// TODO Auto-generated method stub
						isSpeachClick = false;
					}
				}, 2000);
			}
			
			break;
			
		case R.id.back_layout:
			this.finish();
			break;
		case R.id.menuBtn://设备信息右上角i
			
			Intent intent = new Intent(PlayerActivity.this, DeviceInfoActivity.class);
			intent.putExtra("id", deviceID);
			intent.putExtra("name", devicename);
			intent.putExtra("isLocal", isLocal);
			intent.putExtra("version", deviceversion);
			startActivity(intent);
			break;
		case R.id.publishBtn:
			new Thread(httpPostThread).start();
			break;
		case R.id.controlBar:
			mScrollLayout.snapToScreen(0);
			setSelectBar(false);
			break;
		case R.id.rfBar:
			mScrollLayout.snapToScreen(1);
			setSelectBar(true);
			break;
		default:
			break;
		}
	}
	private boolean isSpeachClick = false;
	@Override
	public boolean onDown(MotionEvent arg0) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public boolean onFling(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
		//mediaStreamer.scanStop();
		// TODO Auto-generated method stub
		float moldX = e1.getX();
		float deltaY = e1.getY() - e2.getY();
		float deltaX = e1.getX() - e2.getX();
		if (moldX < screenBean.getsWidth() / 5.0){// ����Ļ��1/5�����»���
			if (Math.abs(deltaY)>Math.abs(deltaX)) {
				if (e1.getY() - e2.getY() < -50) {//��������,�۽�Զ
					mediaStreamer.focusOut();
				}else if (e1.getY() - e2.getY() > 50){//�������ϣ��۽���
					mediaStreamer.focusIn();
				}
			}
		}else{
			
			if (mediaStreamer == null) {
				return false;
			}
			if (Math.abs(deltaY)>Math.abs(deltaX)) {
				if (e1.getY() - e2.getY() < -50) {//move up
					mediaStreamer.rollUp();
				}else if (e1.getY() - e2.getY() > 50){//move down
					mediaStreamer.rollDown();
				}
			}else {
				if (e1.getX() - e2.getX() > 50) {//move left
					mediaStreamer.turnRight();			
				}else if (e1.getX() - e2.getX() < -50) {//move right ----- left
					mediaStreamer.turnLeft();
				}
			}		
		}
		
		return true;
	}

	@Override
	public void onLongPress(MotionEvent arg0) {
		// TODO Auto-generated method stub
	}
	@Override
	public boolean onScroll(MotionEvent arg0, MotionEvent arg1, float arg2,
			float arg3) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public void onShowPress(MotionEvent arg0) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public boolean onSingleTapUp(MotionEvent e) {
		// TODO Auto-generated method stub
		int[] location = new int[2];
		glSurfaceView.getLocationOnScreen(location);
		if (e.getX()>location[0] && e.getX()<(location[0]+glSurfaceView.getWidth())
				&& e.getY()>location[1] && e.getY()<(location[1]+glSurfaceView.getHeight()))
		
		{
			mediaStreamer.scanStop();
			return true;
		}	
		return false;
	}
	
	@Override
	public boolean onTouch(View arg0, MotionEvent arg1) {
		// TODO Auto-generated method stub
		return false;
	}
	
	
	
	@SuppressLint("NewApi") @Override
	public boolean onTouchEvent(MotionEvent event) {
		switch(event.getActionMasked())
		{
			case MotionEvent.ACTION_POINTER_DOWN:
			{
				if(event.getPointerCount() == 2)
				{
					lastFingerDis = distanceBetweenFingers(event);
				}
			}
				break;
				
			case MotionEvent.ACTION_POINTER_UP:
			{
				if(event.getPointerCount() == 2)
				{
					double nNewLast = distanceBetweenFingers(event);
					if(lastFingerDis == 0.0)
					{
						break;
					}
					
					if(nNewLast > lastFingerDis)
					{
						this.mediaStreamer.zoomIn();
					}
					else
					{
						this.mediaStreamer.zoomOut();
					}
					
					lastFingerDis = 0.0;
				}
			}
				break;
		}
		return gestureDetector.onTouchEvent(event);
	}
	
    private double distanceBetweenFingers(MotionEvent event) { 
        float disX = Math.abs(event.getX(0) - event.getX(1)); 
        float disY = Math.abs(event.getY(0) - event.getY(1)); 
        return Math.sqrt(disX * disX + disY * disY); 
    } 
    
	@Override
	public boolean onDoubleTap(MotionEvent e) {
		// TODO Auto-generated method stub		
		float scale = glSurfaceView.getZoomedScale();
		//float scale = myVideoSurface.getScale();
		if (scale == 0) {
			return false;
		}	
		
		//�ж�˫�������Ƿ���ͼ�񲥷���
		if (e.getX()>glSurfaceView.getLeft() && e.getX()<glSurfaceView.getRight()
				&& e.getY()>glSurfaceView.getTop() && e.getY()<glSurfaceView.getBottom())
		{
			int x = (int) ((e.getX()-this.glSurfaceView.getLeft())/scale);
			int y = (int) ((e.getY()-this.glSurfaceView.getTop())/scale);
			this.mediaStreamer.zoomInPosition(x,y);
			return true;
		}
		return false;
	}
	@Override
	public boolean onDoubleTapEvent(MotionEvent e) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public boolean onSingleTapConfirmed(MotionEvent e) {
		// TODO Auto-generated method stub
		return false;
	}
	
	class DrawSurfaceRunnable implements Runnable
	{
		boolean recGetIFrame = false;
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			int[] resolution = new int[2];
			byte[] out;
			try {
				//out = new byte[3*1920*1080];
				out = new byte[3*2600*2000];
			} catch (OutOfMemoryError e2) {
				// TODO Auto-generated catch block
				Log.i(TAG, "--"+e2);
				finish();
				return;
			}
			long startTime, endTime;
			while(!forceExitThread){															
				startTime=System.currentTimeMillis();
				if (recState==RecState.START) {
					if(recGetIFrame){
						recorder.recordVideo(frames[iFrameIndex].getFrameData());
					}else {
						if(frames[iFrameIndex].isKeyFrame()){
							recGetIFrame = true;
							preState = RecState.START;
							recorder.recordVideo(frames[iFrameIndex].getFrameData());
						}
					}										
				}else if(recState==RecState.PAUSE){

				}else if (recState==RecState.STOP) {
					if (preState != RecState.STOP) {
						preState = RecState.STOP;
						recGetIFrame = false;
						recorder.stopRecording();
						fileScan(videoFile);
					}
				}
				
				try {		
					//2016.07.25	by zheng
					int nsize = videoDecoder.decoderNal(frames[iFrameIndex].getFrameData(), out, resolution);
					if(nsize == 0)//ȡ��һ֡
					{
						try
						{
							frames[(iFrameIndex+1)%2] = mediaStreamer.getOneVideoFrame(-1); //  һֱ�ȵ����յ��ڶ�֡�ſ�ʼ����
							if(frames != null && frames[(iFrameIndex+1)%2]!=null && 
									frames[(iFrameIndex+1)%2].getTimeStamp()>frames[iFrameIndex].getTimeStamp()){	
								iFrameIndex = (iFrameIndex+1)%2;
							}else if(forceExitThread){
								break;
							}
						}catch(NullPointerException e)
						{
							break;
						} 
					}	
					//end
					nVideoWidth = resolution[0];
					nVideoHeight = resolution[1];
					
					
				} catch (NullPointerException e) {
					// TODO: handle exception
					e.printStackTrace();  // mediaStreamer �Ѿ��Ͽ�
					if (preState != RecState.STOP) {
						preState = RecState.STOP;
						recGetIFrame = false;
						//Log.d("record", "stop rec!!");
						recorder.stopRecording();
						fileScan(videoFile);
					}
					return;					
				}
				
				//videoRender.draw(out, resolution[0], resolution[1]);
				try {//try catch add by 12.14
					glSurfaceView.update(out, resolution[0], resolution[1]);
				} catch (OutOfMemoryError e1) {
					// TODO Auto-generated catch block
					Log.i(TAG, "--glSurfaceView.update:"+e1);
					finish();
				}catch (NullPointerException e){
					Log.i(TAG, "--glSurfaceView.update:"+e);
					finish();
				}

				if (snap) {
					//��������ͼƬ
						snap = false;
				        try {
							Bitmap bmp = RGB24ToARGB(out, resolution);
							if(bmp!=null)
							{
								saveSnapFile(bmp, true, imageFile);
								imageFile = null;
								bmp.recycle();
								bmp = null;
							}
							mHandler.sendEmptyMessage(4);
				        } 
						catch (Exception e) {
							// TODO: handle exception
						}
				}
				try {
					frames[(iFrameIndex+1)%2] = mediaStreamer.getOneVideoFrame(-1); //  һֱ�ȵ����յ��ڶ�֡�ſ�ʼ����
					if(frames != null && 
							frames[(iFrameIndex+1)%2]!=null && 
							frames[(iFrameIndex+1)%2].getTimeStamp()>frames[iFrameIndex].getTimeStamp()
							)
					{	
						iFrameIndex = (iFrameIndex+1)%2;
					}
					else if(forceExitThread)
					{
						break;
					}
				} catch (NullPointerException e1) {
					e1.printStackTrace();
					break;
				}
				endTime=System.currentTimeMillis();
				if(frames[0]!=null && frames[1]!=null){	
					long waitTime = (frames[iFrameIndex].getTimeStamp()-frames[(iFrameIndex+1)%2].getTimeStamp() )-	(endTime - startTime);
					////Log.d("waittime", "waitTime = " +waitTime);
					if( waitTime>8){
						try {						
							waitTime =waitTime-8;
							if(waitTime<1000){
								Thread.sleep(waitTime);								//��Ļ��תʱ�ỽ���߳�
							}else{
								;//Thread.sleep(250);
							}
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
			}
			
			// �������һ��ͼƬ��Ϊ����ͼ
			if(resolution[0] > 0 && resolution[1] > 0)
			{
		        try 
		        {
					File snapFile = openSnapFile("snapshot", deviceID+".jpg");
					Bitmap bitMap_ARGB = RGB24ToARGB(out, resolution);//CAUSE out of money
					if(bitMap_ARGB!=null)
					{
						saveSnapFile(bitMap_ARGB, true, snapFile);
						bitMap_ARGB.recycle();
						bitMap_ARGB = null;
					}
		        }
		        catch (Exception e) 
		        {
						// TODO: handle exception
				}
					
			}	
			out = null;
		}		
	}
	
	Runnable getIFrameRunnable = new Runnable(){

		@Override
		public void run() {
			// TODO Auto-generated method stub
			while(frames_51see[iFrameIndex]==null ||!frames_51see[iFrameIndex].isKeyFrame())
			{ 
				if(mediaStreamer_51see!=null)
				{
					frames_51see[iFrameIndex] = mediaStreamer_51see.getOneVideoFrame(200);	
				}
				
				if(forceExitThread)
				{
					break;				//ǿ�ƽ����߳�ʱ���ô˱�־λ
				}
				
				if(frames_51see[iFrameIndex] == null)
				{
					continue;
				}
			}
			
			if(!forceExitThread)
			{	
				fps = frames_51see[iFrameIndex].getFrameRate();
				mHandler.sendEmptyMessage(MSG_GET_IFRAME);   //���յ��ؼ�֡����ʼ�����߳�
			}
		}
		
	};
	Runnable getIFrameRunnable_tutk = new Runnable(){

		@Override
		public void run() {
			// TODO Auto-generated method stub
			while(frames_tutk[iFrameIndex]==null ||
					!frames_tutk[iFrameIndex].isKeyFrame()){ 
				//iFrameIndex = (iFrameIndex+1)%2;
				if(mediaStreamer_tutk != null)	
				{
					frames_tutk[iFrameIndex] = mediaStreamer_tutk.getOneVideoFrame(200);				
				}
				if(forceExitThread){
					break;				
				}
				
				if(frames_51see[iFrameIndex] == null)
				{
					continue;
				}
			}
			if(!forceExitThread){	
				//Log.d("PlayActivity", "get iFrame ");	
				fps = frames_tutk[iFrameIndex].getFrameRate();
				mHandler.sendEmptyMessage(MSG_GET_IFRAME_TUTK);   
			}
		}
		
	};
	/**
	 * RGB24ת��ARGB�ٴ浽Bitmap����ȥ
	 * 
	 * @param out
	 *            ������ͼƬ��� RGB24��
	 * @param resolution
	 *            ���
	 * @return
	 */
	public Bitmap RGB24ToARGB(byte[] out, int[] resolution) {
		try {
			
		int len = out.length;
		//Log.d("RGB24ToARGB", "out.length = " +len +"connected = "+connected);
		int[] buff = new int[len / 3];	//maybe CAUSE out of money
		int j = 0;
		for (int i = 0; i < len; i += 3) {
			byte red = out[i];
			byte green = out[i + 1];
			byte blue = out[i + 2];
			byte alpha = (byte) 0xff;
			buff[j] = ((alpha << 24) & 0xFF000000) | ((red << 16) & 0x00FF0000)
					| ((green << 8) & 0xFF00) | (blue & 0xFF);
			j++;
		}
		Bitmap bmp;
		bmp = Bitmap.createBitmap(buff, resolution[0], resolution[1],Config.ARGB_8888);
		buff = null;
		return bmp;
			
		} catch (OutOfMemoryError e) {
			// TODO Auto-generated catch block
			Log.i(TAG, "Bitmap.createBitmap:"+e);
			return null;
		}
	}  
	
	private void saveSnapFile(Bitmap bmp, boolean auto, File image) {
		snap = false;
		try {
			FileOutputStream outputStream = new FileOutputStream(image);
			bmp.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);
			outputStream.flush();
			outputStream.close();
			outputStream = null;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NullPointerException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}

	private void saveSnapFile(byte[] out, int[] resolution, boolean auto, File image)
	{	
		snap = false;
		 try {
				FileOutputStream outputStream = new FileOutputStream(image); 
				ByteBuffer buffer = ByteBuffer.wrap(out, 0, resolution[0]*resolution[1]*3);
				Bitmap bmp = Bitmap.createBitmap(resolution[0], resolution[1], Config.RGB_565);
				bmp.copyPixelsFromBuffer(buffer);
				bmp.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);
				if(!auto)
				{
					mHandler.sendEmptyMessage(4);
				}
		
				outputStream.flush();  
				outputStream.close();  
				outputStream = null;
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	
	

	
	public class ConnectThread extends Thread
	{
		String type;
		public ConnectThread(String type)
		{
			this.type = type;
		}
		
		@Override
		public void run()
		{
			Bundle bundle = getIntent().getExtras();
			String szID = bundle.getString("id");
			String szURL = bundle.getString("url");
			boolean isLocal = bundle.getBoolean("isLocal");
			deviceversion = bundle.getString("version");
			devicename = bundle.getString("name");
			deviceID =szID;
			forceExitThread = false;
			if (szURL == null) {//��Ч��IP��ַ
				mHandler.sendEmptyMessage(MSG_INVALID_IP);
			}
			
			Map<String, String> paramp = new HashMap<String, String>();
			paramp.put("UserName", "admin"); // Ĭ���û���
			paramp.put("Password", "admin"); // Ĭ������
			paramp.put("Id", szID);	
			if (isLocal) {
				mediaStreamer_51see = new LocalMediaStreamer(szURL, paramp);
				mediaStreamer = mediaStreamer_51see;
				if (mediaStreamer != null)
				{
					mediaStreamer.setOnAlarmEnableListener(mOnAlarmEnableListener);
					mediaStreamer.setOnAVQSetListener(mOnAVQSetListener);	
					mediaStreamer.setOnPipeIOExceptionListener(mOnPipeIOExceptionListener);
					mediaStreamer.setMediaDataListener(PlayerActivity.this);
				}
				
				if (mediaStreamer == null || !mediaStreamer.open() || videoDecoder == null) 
				{
					mHandler.sendEmptyMessage(MSG_INIT_FAIL);
				}
				else 
				{          
			    	getIFrameThread = new Thread(getIFrameRunnable);
			    	frames_51see = new VideoFrame[2];
					iFrameIndex = 0;
					getIFrameThread.start();
				}
			}
			else if ("tutk" == type) 
			{
				mediaStreamer_tutk = MediaStreamFactory.createTutkMediaStreamer(szURL, paramp);
				if (mediaStreamer_tutk != null)
				{
					mediaStreamer_tutk.setOnAlarmEnableListener(mOnAlarmEnableListener);
					mediaStreamer_tutk.setOnAVQSetListener(mOnAVQSetListener);	
					mediaStreamer_tutk.setOnPipeIOExceptionListener(mOnPipeIOExceptionListener);
					mediaStreamer_tutk.setMediaDataListener(PlayerActivity.this);
				}
				if (mediaStreamer_tutk == null || !mediaStreamer_tutk.open()
						|| videoDecoder == null) {
					Log.i(TAG, "send MSG_TUTK_FAIL");
						mHandler.sendEmptyMessage(MSG_TUTK_FAIL);
					
				} else {   
			    	getIFrameThread_tutk = new Thread(getIFrameRunnable_tutk);
			    	frames_tutk = new VideoFrame[2];
					iFrameIndex = 0;
					getIFrameThread_tutk.start();
					
				}
			}
			else if("51see" == type)
			{
				mediaStreamer_51see = MediaStreamFactory.create51SeeMediaStreamer(szURL, paramp);
				mediaStreamer = mediaStreamer_51see;

				if (mediaStreamer_51see != null)
				{
					mediaStreamer_51see.setOnAlarmEnableListener(mOnAlarmEnableListener);
					mediaStreamer_51see.setOnAVQSetListener(mOnAVQSetListener);		
					mediaStreamer_51see.setOnPipeIOExceptionListener(mOnPipeIOExceptionListener);
					mediaStreamer_51see.setMediaDataListener(PlayerActivity.this);
				}
				
				if (mediaStreamer_51see == null || !mediaStreamer_51see.open()
						|| videoDecoder == null) {
					mHandler.sendEmptyMessage(MSG_INIT_FAIL);
					
				} else {  
			    	getIFrameThread = new Thread(getIFrameRunnable);
			    	frames_51see = new VideoFrame[2];
					iFrameIndex = 0;
					getIFrameThread.start();
				}
			}
			
			mHandler.sendEmptyMessage(MSG_REBACK_AUDIO_SPEACH);
		}
	}

	Runnable httpGetThread = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			try {
				commentList.clear();
				URL url = new URL("http://user.hddvs.net:8080/api/GetCommentAction.php?deviceid="+deviceID);
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
				InputStreamReader in = new InputStreamReader(conn.getInputStream());
				BufferedReader bufferedReader = new BufferedReader(in);
				String result = "";
				String readLine = null;
				while((readLine = bufferedReader.readLine()) != null){
					result += readLine; 
				}
				in.close();
				conn.disconnect();
				System.out.println("������"+result);
				parserResult(result);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	};
	
	Runnable httpPostThread = new Runnable() {
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			try {
				String commentStr = commentEt.getText().toString();
				String username = appData.getAccountInfo().getUsername();
				if(commentStr.equals("")){
					//�������ݲ���Ϊ��
					commentHandler.sendEmptyMessage(MSG_POST_COMMENT_NULL);
				}else{
					URL url = new URL("http://user.hddvs.net:8080/api/CommentAction.php");
					StringBuffer params = new StringBuffer();
					params.append("deviceid").append("=").append(deviceID).append("&")
		              .append("comment").append("=").append(commentStr).append("&")
		              .append("username").append("=").append(username);
					HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
					urlConn.setDoInput(true);//�����������
					urlConn.setDoOutput(true);//������������
					urlConn.setRequestMethod("POST");
					urlConn.setRequestProperty("accept", "*/*");  
					urlConn.setRequestProperty("connection", "Keep-Alive");  
					urlConn.setUseCaches(false);
					byte[] bypes = params.toString().getBytes();
					urlConn.connect();//���Ӽ������˷�����Ϣ
					OutputStream out = urlConn.getOutputStream();
					out.write(bypes);//���Ͳ���
					out.flush();
					out.close();
					
					//����
					InputStreamReader in=new InputStreamReader(urlConn.getInputStream());
					BufferedReader bufferedReader = new BufferedReader(in);
					String result = "";
					String readLine = null;
					while((readLine = bufferedReader.readLine()) != null){
						result += readLine; 
					}
					bufferedReader.close();
					urlConn.disconnect();
					System.out.println("���ս��"+result);
					JSONObject jo = new JSONObject(result);
					String status = jo.getString("status");
					if(status.equals("1")){
						commentHandler.sendEmptyMessage(MSG_POST_COMMENT_SUCCESS);
					}else{
						//��������ʧ��
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}finally{
			}
		}
	};
	
	public void parserResult(String result){
		try {
			JSONObject jo = new JSONObject(result);
			String status = jo.getString("status");
			int num = jo.getInt("num");
			JSONArray resultArray = jo.getJSONArray("result");
			
			for(int i=0;i<resultArray.length();i++){
				MyComment comment = new MyComment();
				JSONObject jsonObj = resultArray.getJSONObject(i);
				String username = jsonObj.getString("username");
				String content = jsonObj.getString("content");
				String publish_time = jsonObj.getString("publish_time");
				System.out.println("����"+i+username+":"+content+":"+publish_time);
				
				comment.setUsername(username);
				comment.setContent(content);
				comment.setPublish_time(publish_time);
				commentList.add(comment);
			}
			System.out.println("status:"+status);
			System.out.println("num:"+num);
			System.out.println();
			if(status.equals("1")){
				commentHandler.sendEmptyMessage(MSG_GET_COMMENT_SUCCESS);
			}else{
				//��ȡ����ʧ��
			}
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	Handler commentHandler = new Handler(){

		@Override
		public void handleMessage(Message msg) {

			switch (msg.what) {
			case MSG_GET_COMMENT_SUCCESS:
				commentListView.
				setAdapter(new CommentAdapter(getApplicationContext(), commentList));
				break;
			case MSG_GET_COMMENT_FAILED:
				toast.ToastShow(getApplicationContext(), "��ȡ����ʧ�ܣ���������",1000);
				//listview����ʾ�� ��ȡ����ʧ�ܣ���������
				break;
			case MSG_POST_COMMENT_SUCCESS:
				toast.ToastShow(getApplicationContext(), "����ɹ�",1000);
				new Thread(httpGetThread).start();
				commentEt.setText("");
				getWindow().setSoftInputMode( WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
				break;
			case MSG_POST_COMMENT_FAILED:
				toast.ToastShow(getApplicationContext(), "��������ʧ�ܣ���������",1000);
				break;
			case MSG_POST_COMMENT_NULL:
				toast.ToastShow(getApplicationContext(), "�������ݲ���Ϊ��",1000);
				break;

			default:
				break;
			}
			super.handleMessage(msg);
		}
		
	};
	
	@Override
	 public void onDestroy(){
	    	videoDecoder.uninitDecoder();
	    	videoDecoder.uninitGlobal();
	    	if(drawSurfaceRunnable != null)
	    	{	
	    	   drawSurfaceRunnable = null;
	    	}
	    	
	    	if(glSurfaceView != null)
	    	{
	    		glSurfaceView = null;
	    	}
	    	
	    	if(getIFrameRunnable != null)
	    	{
	    		getIFrameRunnable = null;
	    	}
	    	
	    	if(getIFrameRunnable_tutk != null)
	    	{
	    		getIFrameRunnable_tutk = null;
	    	}
	    	
	    	if(recorder != null)
	    	{
	    		recorder = null;
	    	}
	    	if(devInfoMediaStream!=null)
			{
				devInfoMediaStream.close();
				devInfoMediaStream = null;
			}
			appData.setRemoteInteractionStreamer(null);
	    	super.onDestroy();
	  }
	
	private void initAlertDialogs() {
		timeoutAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
				.setTitle(R.string.sure)
				.setMessage(R.string.timeout)
				.setPositiveButton(R.string.yes,
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								// TODO Auto-generated method stub
								dialog.dismiss();
								recState = RecState.STOP;
								if (mediaStreamer != null) {
									mediaStreamer.close();
								}
								stopThread();
								PlayerActivity.this.finish();
							}
						}).create();
		
		lostConnectionAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
				.setTitle(R.string.lostConnectionTitle)
				.setMessage(R.string.lostConnectionMessage)
				.setPositiveButton(R.string.yes,
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								// TODO Auto-generated method stub
								dialog.dismiss();
								recState = RecState.STOP;
								if (mediaStreamer != null) {
									mediaStreamer.close();
								}
								stopThread();
								PlayerActivity.this.finish();
							}
						}).create();
		
		nonetworkAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
				.setTitle(R.string.sure)
				.setMessage(R.string.nonetwork)
				.setPositiveButton(R.string.yes,
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								// TODO Auto-generated method stub
								dialog.dismiss();
								recState = RecState.STOP;
								if (mediaStreamer != null) {
									mediaStreamer.close();
								}
								stopThread();
								PlayerActivity.this.finish();
							}
						}).create();
		
		invalidIPAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
				.setTitle(R.string.sure)
				.setMessage(R.string.invalidIPAddress)
				.setPositiveButton(R.string.yes,
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								// TODO Auto-generated method stub
								dialog.dismiss();
								recState = RecState.STOP;
								if (mediaStreamer != null) {
									mediaStreamer.close();
								}
								stopThread();
								PlayerActivity.this.finish();
							}
						}).create();
		
		initFailedAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
				.setTitle(R.string.sure)
				.setMessage(R.string.systemError)
				.setPositiveButton(R.string.sure,
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								// TODO Auto-generated method stub
								dialog.dismiss();
								recState = RecState.STOP;
								if (mediaStreamer != null) {
									mediaStreamer.close();
								}
								stopThread();
								PlayerActivity.this.finish();
							}
						}).create();
	}
	
	private void dismissAlertDialogs(){
		timeoutAlertDialog.dismiss();
		lostConnectionAlertDialog.dismiss();
		nonetworkAlertDialog.dismiss();
		invalidIPAlertDialog.dismiss();
		initFailedAlertDialog.dismiss();
	}
	
	private MyHandler mHandler = new MyHandler(this);
    
	static class MyHandler extends Handler {
		WeakReference<PlayerActivity> mActivity;

		MyHandler(PlayerActivity activity) {
			mActivity = new WeakReference<PlayerActivity>(activity);
		}

		@Override
		public void handleMessage(Message msg) {
			PlayerActivity playerActivity = mActivity.get();
			playerActivity.handleMessage(msg);
		}
	};
	
	@SuppressWarnings("deprecation")
	private void handleMessage(Message msg){
		switch (msg.what) {
		case MSG_TIME_OUT:
		case MSG_DISCONNECT:
			if(connect_status_51see<=2)
			{
				recState = RecState.STOP;
				if (mediaStreamer != null){
					mediaStreamer.close();
				}
				connect_status_51see = 0;
				//Log.d(TAG, "MSG_DISCONNECT  stopThread");
				stopThread();
				new ConnectThread("51see").start();	
				getRfPack();
				if(flag==1){//���Խ��ѿ�����ֱ�Ӵ������
					if (aacRecord!=null) {
						aacRecord.stop();
						aacRecord = null;
					}	
					if(mediaStreamer_51see!=null){
						mediaStreamer_51see.resetbInterCom();
					}
				}
			}
			break;

		case MSG_STOP_RECORD:
			btnRecord.setBackgroundResource(R.drawable.record);
			
			break;
			
		case MSG_GET_IFRAME:///local or 51see connected
			if(!isLocal)
			{
				if(connect_status_51see==0)
				{
					
					if(connect_status_tutk==0)//if tutk connected
					{
						mediaStreamer = mediaStreamer_51see;
						connect_status_51see = 2;
					}
					else
					{
						mediaStreamer_51see.setVideo(false);
						connect_status_51see = 3;
						break;
					}
						
				}
				else
				{
					if(connect_status_tutk==1)//if tutk connected
					{
						if(mediaStreamer_51see!=null)
						{
							mediaStreamer_51see.setVideo(false);
							connect_status_51see = 3;
						}
						break;
					}
				}
			}
			else
			{
				connect_status_51see = 1;
			}
			frames = frames_51see;

			if(drawSurfaceThread!=null)//if 51see has connected, stop the video
			{
				break;
			}
			drawSurfaceThread = new Thread(drawSurfaceRunnable);
			drawSurfaceThread.start();
			viewFlipper.setDisplayedChild(1);
			connected = true;
			setButtons(connected);
			if (isRecording) {
				btnRecord.performClick();
			}
			break;
		case MSG_GET_IFRAME_TUTK:///tutk connected
			mediaStreamer = mediaStreamer_tutk;
			frames = frames_tutk;
			if(drawSurfaceThread!=null)//if 51see has connected, stop the video
			{
				if(connect_status_51see==2)
				{
					if(mediaStreamer_51see!=null)
						mediaStreamer_51see.setVideo(false);
					connect_status_51see = 3;
				}
				connect_status_tutk = 1;
				break;
			}
			drawSurfaceThread = new Thread(drawSurfaceRunnable);
			drawSurfaceThread.start();
			viewFlipper.setDisplayedChild(1);
			connected = true;
			setButtons(connected);
			if (isRecording) {
				btnRecord.performClick();
			}
			connect_status_tutk = 1;
			break;
		case MSG_SNAP_OK:
			toast.ToastShow(getApplicationContext(), "Save picture OK!", 1000);
			break;

		case MSG_NONE_NETWORK:
			//stopThread();
			nonetworkAlertDialog.show();
			break;

		case MSG_INVALID_IP:
			invalidIPAlertDialog.show();//��Ч��IP��ַ
			break;
		case MSG_TUTK_FAIL:
			connect_status_tutk = 0;
			if(connect_status_51see==3)
			{
				connect_status_51see = 0;
				if(mediaStreamer_51see!=null)
					mediaStreamer_51see.close();
				new ConnectThread("51see").start();
				mediaStreamer_tutk.close();
				mediaStreamer_tutk = null; 
			}
			break;
			
		case MSG_INIT_FAIL:
			mediaStreamer_51see.close();
			new ConnectThread("51see").start();
			break;
			
		case MSG_ALARM_STATE_CHANGED:
			RefreshAlarmEnableState();	
			break;
		case MSG_AVQ_CHANGED:
			RefreshAVQState();	
			break;
		case MSG_START_INTERCOMM:
			if(enableIntercom)
			{
				btnIntercom.setBackgroundResource(R.drawable.mic_on);
			}
			break;
			
		case MSG_INTERCOMM_REQ_FAIL:
			String ret = (String) msg.obj;
			btnIntercom.setBackgroundResource(R.drawable.mic_off);
			if (ret==null) {
				break;
			}else if (ret.equals("audioBusy")) {
				//Log.e(TAG, "Intercomm audioBusy");
			}else if (ret.equals("audioOff")) {
				//Log.e(TAG, "Intercomm audioOff");
			}else if (ret.equals("audioDisconnect")) {
				//Log.e(TAG, "Intercomm audioDisconnect");
			}
			break;
		case MSG_SET_VIEWPAGER:
			
			setRFScrollLayout();
			break;
		case MSG_SET_SUCESS:
			if(waitDialog!=null){
				waitDialog.dismiss();
			}
			rfpack = curRfpack;
			if(RFDeviceInfoActivity.mDevice!=null){
				RFDeviceInfoActivity.mDevice.setRFInfo(rfpack);
			}
			mRFTotalList = rfpack.getRFDevList();
			String rfType = ((String)mRFTotalList.get(index).get("MY51CRFID")).substring(0,2);
			if(rfType.equals("11")||rfType.equals("12")||rfType.equals("13")){
				String switchStatus = (String)mRFTotalList.get(index).get("status");
				switchNum = Integer.parseInt(switchStatus);
				if(switchDialog!=null&&switchDialog.isShowing()){
					setSwitchStatus();
				}
			}
			indexBar.removeAllViews();
			mScrollLayout.removeViews(1, mScrollLayout.getChildCount()-1);
			setRFScrollLayout();
        	toast.ToastShow(getApplicationContext(), getResources().getString(R.string.rfsettingsuccess), 1000);
        	asyncTask.cancel(true);	
			break;	
		case MSG_SET_FAILED:
			if(waitDialog!=null){
				waitDialog.dismiss();
			}
			toast.ToastShow(getApplicationContext(), getResources().getString(R.string.rfsettingfail), 1000);
        	asyncTask.cancel(true);
			break;	
		case MSG_SET_TIMEOUT:
			if(waitDialog!=null){
				waitDialog.dismiss();
			}
			toast.ToastShow(getApplicationContext(), getResources().getString(R.string.rfsettingfail), 1000);
			break;	
		case MSG_SET_CURTAIN_FAILED:
			toast.ToastShow(getApplicationContext(), getResources().getString(R.string.rfsettingfail), 1000);
			break;
		case MSG_SET_CURTAIN_SUCCESS:
			toast.ToastShow(getApplicationContext(), getResources().getString(R.string.rfsettingsuccess), 1000);
			break;	
		case MSG_SET_AUDIO_OPEN:
			if(!enableAudio)
			{ 
				enableAudio = !enableAudio;
				onSetAudio(enableAudio);
			}
			break;
		case MSG_SET_AUDIO_RESTART:
			stopAudio();
			startAudio();
			break;
		case MSG_REBACK_AUDIO_SPEACH:
			//�ָ�onPause֮ǰ��״̬
			//�Խ�
			if(flag==1){
				onSetInterComAction(true);
			}
			//��Ƶ
			if(enableAudio){
				onSetAudio(enableAudio);
			}
			break;
		default:
			break;
		}		
	}
	
	private void RefreshAlarmEnableState(){
		if(mediaStreamer==null)
			return;
		if (mediaStreamer.m_bAlarmEnable==0) 
		{
			btnAlarm.setBackgroundResource(R.drawable.alarm_off);
		}
		else 
		{
			btnAlarm.setBackgroundResource(R.drawable.alarm_on);
		}
	};	
	
	private void RefreshAVQState(){
		if(mediaStreamer==null)
			return;

		if (mediaStreamer.m_nDefinitionCurrent==1) //1 3 5 max mid min
		{
			btnDefinition.setBackgroundResource(R.drawable.avq_high);
		}
		else if(mediaStreamer.m_nDefinitionCurrent==3) 
		{
			btnDefinition.setBackgroundResource(R.drawable.avq_mid);
		}
		else if(mediaStreamer.m_nDefinitionCurrent==5) 
		{
			btnDefinition.setBackgroundResource(R.drawable.avq_min);
		}
	};
	
	private void setButtons (boolean isConnected){
        
        btnAlarm.setEnabled(isConnected);
        btnDefinition.setEnabled(isConnected);
        btnFlipH.setEnabled(isConnected);
        btnFlipV.setEnabled(isConnected);
        btnIntercom.setEnabled(isConnected);
        btnAudio.setEnabled(isConnected);
        btnSnapshoot.setEnabled(isConnected);
        btnRecord.setEnabled(isConnected);		
	}

	@Override
	public void onRefresh() {
		// TODO Auto-generated method stub
		new Thread(httpGetThread).start();
	}
	
	public void setCamScrollLayout(){
		LayoutInflater inflate = LayoutInflater.from(getApplicationContext());
		/*������view*/
		View view = inflate.inflate(R.layout.cam_control_fragment, null);
		btnFlipV = (ImageView) view.findViewById(R.id.imageButtonFlipV);
        btnAlarm  = (ImageView) view.findViewById(R.id.imageButtonAlarm);
        btnDefinition  = (ImageView) view.findViewById(R.id.imageButtonDefinition);
        btnFlipH = (ImageView)view. findViewById(R.id.imageButtonFlipH);
        btnAudio = (ImageView) view.findViewById(R.id.imageButtonAudio);
        btnSnapshoot = (ImageView)view. findViewById(R.id.imageButtonSnap);
        btnRecord = (ImageView) view.findViewById(R.id.imageButtonRecord);
        btnIntercom = (ImageView) view.findViewById(R.id.imageButtonInterCom);
        btnFlipV.setOnClickListener(this);
        btnAlarm.setOnClickListener(this);
        btnDefinition.setOnClickListener(this);
        btnFlipH.setOnClickListener(this);
        btnAudio.setOnClickListener(this);
        btnSnapshoot.setOnClickListener(this);
        btnRecord.setOnClickListener(this);
        btnIntercom.setOnClickListener(this);
        setButtons(connected);
        if (isRecording) {
        	btnRecord.setBackgroundResource(R.drawable.record_pressed);
		}else {
        	btnRecord.setBackgroundResource(R.drawable.record);
		}
        
        btnAudio.setBackgroundResource(enableAudio?R.drawable.player_intercom_on:R.drawable.player_intercom_off);
        if (mediaStreamer != null)
        {
        	RefreshAVQState();
        }
		mScrollLayout.addView(view);
	}
	
	public void setRFScrollLayout(){
		int pageCount = (int)Math.ceil( mRFTotalList.size()/APP_PAGE_SIZE);
		if(pageCount==0){
			return;
		}
		barLayout.setVisibility(View.VISIBLE);
		for (int i = 0; i < pageCount; i++) {
			LinearLayout linearLayout = new LinearLayout(this);
			GridView gridView = new GridView(this);
			scrollAdapter = new ScrollAdapter(this, mRFTotalList, i);
			gridView.setAdapter(scrollAdapter);
			gridView.setNumColumns(4);
			gridView.setHorizontalSpacing((int)getResources().getDimension(R.dimen.horizontalSpacing));
			gridView.setVerticalSpacing((int)getResources().getDimension(R.dimen.verticalSpacing));
			gridView.setSelector(R.drawable.shap_grid_click);
			gridView.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);
			gridView.setOnItemClickListener(this);
			
			linearLayout.addView(gridView);
			mScrollLayout.addView(linearLayout);
			android.view.ViewGroup.LayoutParams lp = linearLayout.getLayoutParams();
			lp.height = android.view.ViewGroup.LayoutParams.MATCH_PARENT;
			lp.width = android.view.ViewGroup.LayoutParams.MATCH_PARENT;
			linearLayout.setLayoutParams(lp);
			linearLayout.setGravity(Gravity.CENTER);
		}
		indexImgList.clear();
		if(pageCount>1){
			for (int i = 0; i < pageCount; i++) {
				addIndexImg();
			}
		}
		if(indexImgList.size()>1){
			for(int i=0;i<indexImgList.size();i++)
			{
				if(mScrollLayout.getCurrentScreenIndex()-1==i)
					indexImgList.get(i).setImageResource(R.drawable.selected_img);
				else
					indexImgList.get(i).setImageResource(R.drawable.unselect_img);
			}
		}
		mScrollLayout.setOnScreenChangeListenerDataLoad(new OnScreenChangeListenerDataLoad() {
			public void onScreenChange(int currentIndex) {
				// TODO Auto-generated method stub
			}
		});
		mScrollLayout.setOnScreenChangeListener(new ScrollLayout.OnScreenChangeListener() {
			
			@Override
			public void onScreenChange(int currentIndex) {
				// TODO Auto-generated method stub
				mScrollLayout.setCurrentScreenIndex(currentIndex);
				if(currentIndex==0){
					setSelectBar(false);
				}else{
					setSelectBar(true);
					if(indexImgList.size()>1){
						for(int i=0;i<indexImgList.size();i++)
						{
							if(currentIndex-1==i)
								indexImgList.get(i).setImageResource(R.drawable.selected_img);
							else
								indexImgList.get(i).setImageResource(R.drawable.unselect_img);
						}
					}
				}
			}
		});
		
		rfStrTypeList = scrollAdapter.getRfStrTypeList();
		devInfoMediaStream.setOnSetRFInfoListener(mOnSetRFInfoListener);
		devInfoMediaStream.setOnSetCurtainInfoListener(mOnSetCurtainInfoListener);
	}
	
	public void setSelectBar(boolean isRf){
		if(isRf){
			rfBar.setBackgroundResource(R.drawable.shap_layout_stroke_pre);
			controlBar.setBackgroundResource(R.drawable.shap_layout_stroke);
			indexBar.setVisibility(View.VISIBLE);
		}else{
			rfBar.setBackgroundResource(R.drawable.shap_layout_stroke);
			controlBar.setBackgroundResource(R.drawable.shap_layout_stroke_pre);
			indexBar.setVisibility(View.GONE);
		}
	}
	
	private OnSetRFInfoListener mOnSetRFInfoListener = new OnSetRFInfoListener()
	{

		@Override
		public void onSetRFInfoFailed() {
			// TODO Auto-generated method stub
			mHandler.sendEmptyMessage(MSG_SET_FAILED);	
		}

		@Override
		public void onSetRFInfoSuccess() {
			mHandler.sendEmptyMessage(MSG_SET_SUCESS);
		}
	};
		
	private OnSetCurtainInfoListener mOnSetCurtainInfoListener = new OnSetCurtainInfoListener() {
			
		@Override
		public void OnSetCurtainInfoSuccess() {
				// TODO Auto-generated method stub
			mHandler.sendEmptyMessage(MSG_SET_CURTAIN_SUCCESS);			
		}
			
		@Override
		public void OnSetCurtainInfoFailed() {
				// TODO Auto-generated method stub
			mHandler.sendEmptyMessage(MSG_SET_CURTAIN_FAILED);
		}
	};	
	
	public void showCurtainDialog(final String curid){
		final Dialog curtainDialog = new Dialog(PlayerActivity.this, R.style.rf_control_dialog);
		curtainDialog.setContentView(R.layout.dialog_curtain);
		Window window = curtainDialog.getWindow();  
	    window.setGravity(Gravity.BOTTOM);  //�˴���������dialog��ʾ��λ��  
	    window.setWindowAnimations(R.style.dialog_animation_style);  
	    /*����dialog���ռ����Ļ*/
        WindowManager.LayoutParams lp = curtainDialog.getWindow().getAttributes();
	    lp.width = (int)(w); //���ÿ��
	    curtainDialog.getWindow().setAttributes(lp);
	    curtainDialog.show();
	    
	    final ProgressBar openLoading = (ProgressBar)curtainDialog.findViewById(R.id.open_progress);
	    final ProgressBar closeLoading = (ProgressBar)curtainDialog.findViewById(R.id.close_progress);
	    final Button open = (Button)curtainDialog.findViewById(R.id.open);
	    final Button close = (Button)curtainDialog.findViewById(R.id.close);
	    final Button pause = (Button)curtainDialog.findViewById(R.id.pause);
	    final ImageView pauseImg = (ImageView)curtainDialog.findViewById(R.id.pauseImg);
	    open.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				devInfoMediaStream.setCurtainInfo(curid+"2001");
				openLoading.setVisibility(View.VISIBLE);
				closeLoading.setVisibility(View.GONE);
				pauseImg.setVisibility(View.GONE);
				open.setBackgroundResource(R.drawable.shap_curtain_btn_close);
				close.setBackgroundResource(R.drawable.shap_curtain_btn);
				pause.setBackgroundResource(R.drawable.shap_curtain_btn);
			}
		});
		close.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				devInfoMediaStream.setCurtainInfo(curid+"2003");
				openLoading.setVisibility(View.GONE);
				closeLoading.setVisibility(View.VISIBLE);
				pauseImg.setVisibility(View.GONE);
				close.setBackgroundResource(R.drawable.shap_curtain_btn_close);
				open.setBackgroundResource(R.drawable.shap_curtain_btn);
				pause.setBackgroundResource(R.drawable.shap_curtain_btn);// TODO Auto-generated method stub
				
			}
		});
		pause.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				devInfoMediaStream.setCurtainInfo(curid+"2002");
				openLoading.setVisibility(View.GONE);
				closeLoading.setVisibility(View.GONE);
				pauseImg.setVisibility(View.VISIBLE);
				pause.setBackgroundResource(R.drawable.shap_curtain_btn_close);
				open.setBackgroundResource(R.drawable.shap_curtain_btn);
				close.setBackgroundResource(R.drawable.shap_curtain_btn);
			}
		});
	}
	public void showSwitchDialog(final String curid,final RFPackage switchPack){
		switchDialog = new Dialog(PlayerActivity.this, R.style.rf_control_dialog);
		switchDialog.setContentView(R.layout.dialog_switch);
		Window window = switchDialog.getWindow();  
	    window.setGravity(Gravity.BOTTOM);  //�˴���������dialog��ʾ��λ��  
	    window.setWindowAnimations(R.style.dialog_animation_style);  
	    /*����dialog���ռ����Ļ*/
        WindowManager.LayoutParams lp = switchDialog.getWindow().getAttributes();
	    lp.width = (int)(w); //���ÿ��
	    switchDialog.getWindow().setAttributes(lp);
	    switchDialog.show();
	    
	    mSwitch1 = (NewSwitch)switchDialog.findViewById(R.id.mSwitch1);
	    mSwitch2 = (NewSwitch)switchDialog.findViewById(R.id.mSwitch2);
	    mSwitch3 = (NewSwitch)switchDialog.findViewById(R.id.mSwitch3);
	    LinearLayout switchGroup2 = (LinearLayout)switchDialog.findViewById(R.id.swtichGroup2);
	    LinearLayout switchGroup3 = (LinearLayout)switchDialog.findViewById(R.id.swtichGroup3);
	    LinearLayout mSwitchL1 = (LinearLayout)switchDialog.findViewById(R.id.mSwitchL1);
	    LinearLayout mSwitchL2 = (LinearLayout)switchDialog.findViewById(R.id.mSwitchL2);
	    LinearLayout mSwitchL3 = (LinearLayout)switchDialog.findViewById(R.id.mSwitchL3);
	    String idType = curid.substring(0, 2);
	    if(idType.equals("12")){
			switchGroup2.setVisibility(View.VISIBLE);
			switchGroup3.setVisibility(View.GONE);
    	}
    	if(idType.equals("13")){
    		switchGroup2.setVisibility(View.VISIBLE);
    		switchGroup3.setVisibility(View.VISIBLE);
    	}
    	if(idType.equals("11")){
    		switchGroup2.setVisibility(View.GONE);
    		switchGroup3.setVisibility(View.GONE);
    	}
    	
    	setSwitchStatus();
    	
    	mSwitchL1.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				boolean switch1 = ((switchNum & 0x01)==1);
				if(!switch1){
					switchNum |= 0x01;
				}else{
					switchNum &= 0xFE;
				}
				String str ="0"+ String.valueOf(switchNum);
				switchPack.setValue(curid, "status",str);
				showWaitDialog(curid,switchPack);
			}
		});
		mSwitchL2.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				boolean switch2 = (((switchNum & 0x02) >>1) ==1);
				if(!switch2){
					switchNum |= 0x02;
				}else{
					switchNum &= 0xfd;
				}
				String str = "0"+String.valueOf(switchNum);
				switchPack.setValue(curid, "status",str);
				showWaitDialog(curid,switchPack);
			}
		});
		mSwitchL3.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				boolean switch3 = (((switchNum & 0x04) >>2)==1);
				if(!switch3){
					switchNum |= 0x04;
				}else{
					switchNum &= 0xfb;
				}
				String str = "0"+String.valueOf(switchNum);
				switchPack.setValue(curid, "status",str);
				showWaitDialog(curid,switchPack);
			}
		});
	}
	
	public void setSwitchStatus(){
		boolean switch1 = ((switchNum & 0x01)==1);
    	boolean switch2 = (((switchNum & 0x02) >>1) ==1);
    	boolean switch3 = (((switchNum & 0x04) >>2)==1);
    	mSwitch1.setChecked(switch1);
    	mSwitch2.setChecked(switch2);
    	mSwitch3.setChecked(switch3);
	}
	
	public void showWaitDialog(String curid,RFPackage mRfPack){
    	waitDialog = new Dialog(PlayerActivity.this, R.style.rf_control_dialog);
    	waitDialog.setContentView(R.layout.login_dialog);
    	TextView dialogTx = (TextView)waitDialog.findViewById(R.id.tx);
    	dialogTx.setText(getResources().getString(R.string.rf_setting));
    	waitDialog.show();
    	asyncTask = new TimeOutAsyncTask(curid,mRfPack);//�����������
		asyncTask.execute(0);
		waitDialog.setOnKeyListener(new Dialog.OnKeyListener() {
			@Override
			public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
				// TODO Auto-generated method stub
				if(keyCode == event.KEYCODE_BACK){
					if (!asyncTask.isCancelled()){
		        		asyncTask.cancel(true);
		        	}
				}
				return false;
			}
		});
    }	 
	
	private class TimeOutAsyncTask extends AsyncTask<Integer, Integer, String>{
		
	 	private String curid;
	 	private RFPackage mRfPack;
	 	public TimeOutAsyncTask(String curid,RFPackage mRfPack){
	 		this.curid = curid;
	 		this.mRfPack = mRfPack;
	 	}
	 	@Override  
        protected void onPreExecute() {  
            super.onPreExecute();  
            curRfpack = new RFPackage();
            curRfpack.parseArrayList(mRfPack.getRFDevList());
            devInfoMediaStream.sendRFDevInfo(curRfpack,curid);//�������
        } 
		        	
		@Override
		protected String doInBackground(Integer... params) {
			// TODO Auto-generated method stub
			try {
				Thread.sleep(20000);
			} catch (InterruptedException e) {
				//Log.d(TAG, " InterruptedException " );
				e.printStackTrace();
			}
			return null;
		}

		@Override   
		protected void onPostExecute(String result) {  
           
            super.onPreExecute();
            mHandler.sendEmptyMessage(MSG_SET_TIMEOUT);
        }
	} 
	
	public enum RFType{
		control(rfStrTypeList.get(0)),
		door(rfStrTypeList.get(1)),
		pir(rfStrTypeList.get(2)),
		smoke(rfStrTypeList.get(3)),
		plug(rfStrTypeList.get(4)),
		siren(rfStrTypeList.get(5)),
		door_camera(rfStrTypeList.get(6)),
		io(rfStrTypeList.get(7)),
		curtain(rfStrTypeList.get(8)),
		lock(rfStrTypeList.get(9)),
		switch1(rfStrTypeList.get(10)),
		switch2(rfStrTypeList.get(11)),
		switch3(rfStrTypeList.get(12)),
		light(rfStrTypeList.get(13));
    	String rfStr;
    	RFType(String rfStr){
    		this.rfStr = rfStr;
    	}
    	public String getrfStr(){
    		return this.rfStr;
    	}
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		// TODO Auto-generated method stub
		index = position+((mScrollLayout.getCurrentScreenIndex()-1)*8);
		String curid = (String)mRFTotalList.get(index).get("MY51CRFID");
		String rfStrType = curid.substring(0, 2);
		RFType rfType = null;
		for(RFType r : RFType.values()){
			if(r.getrfStr().equals(rfStrType))
				rfType = r;
		}
		switch (rfType) {
		case control:
		case door:
		case pir:
		case smoke:
		case plug:
		case siren:
		case door_camera:
		case io:
		case lock:
		case light:
			RFPackage rfpackclone = new RFPackage();
			rfpackclone.parseArrayList(rfpack.getRFDevList());
			String status = (String)mRFTotalList.get(index).get("status");
			if(!status.equals("on")){
				rfpackclone.setValue(curid, "status","on");
			}else{
				rfpackclone.setValue(curid, "status","off");
			}
			showWaitDialog(curid,rfpackclone);
			break;
		case curtain:
			showCurtainDialog(curid);
			break;
		case switch1:
		case switch2:
		case switch3:
			RFPackage rfpackclone1 = new RFPackage();
			rfpackclone1.parseArrayList(rfpack.getRFDevList());
			String switchStatus = (String)mRFTotalList.get(index).get("status");
			switchNum = Integer.parseInt(switchStatus);
			showSwitchDialog(curid,rfpackclone1);
			break;
		default:
			break;
		}
	}
	
}
